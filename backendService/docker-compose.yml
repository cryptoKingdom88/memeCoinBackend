version: '3.8'

services:
  backend-websocket:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8080}:8080"
    environment:
      # Server Configuration
      - PORT=8080
      - WS_READ_BUFFER_SIZE=${WS_READ_BUFFER_SIZE:-1024}
      - WS_WRITE_BUFFER_SIZE=${WS_WRITE_BUFFER_SIZE:-1024}
      
      # Kafka Configuration
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - KAFKA_CONSUMER_GROUP=${KAFKA_CONSUMER_GROUP:-backend-service}
      
      # Performance Configuration
      - MAX_CLIENTS=${MAX_CLIENTS:-1000}
      - MESSAGE_BUFFER_SIZE=${MESSAGE_BUFFER_SIZE:-100}
      - KAFKA_BATCH_SIZE=${KAFKA_BATCH_SIZE:-100}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    
    depends_on:
      - kafka
      - zookeeper
    
    restart: unless-stopped
    
    healthcheck:
      test: ["/backendService", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    networks:
      - backend-network

  # Kafka and Zookeeper for development/testing
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge